{"version":3,"sources":["hoc/WithAuthRedirect.js","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","AuthRedirectComponent","this","props","to","React","connect","module","exports","Post","console","log","message","className","styles","item","src","ava","likesCount","maxLength15","maxLengthCreators","ResultPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","requiredFields","MyPosts","memo","postsElement","posts","map","p","id","data","addNewPost","post","MyPostsContainer","profile","dispatch","newPostText","addPostActionCreator","ProfileStatusWithHooks","stateWithSetState","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","ev","updateStatus","onChange","currentTarget","value","ProfileInfo","classes","aboutMe","contacts","facebook","vk","photos","large","mainPhoto","Profile","store","ProfileContainer","userId","match","params","authorizedId","history","push","getProfileThunk","setStatusThunk","updateStatusThunk","compose","withRouter"],"mappings":"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","file":"static/js/3.7e813cdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n\treturn {\r\n        isAuth: state.auth.isAuth\r\n\t}\r\n};\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n\t\tclass AuthRedirectComponent extends React.Component{\r\n\t\t\trender(){\r\n\t\t\t\tif(!this.props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n\t\t\t    return <Component {...this.props} />\r\n\t\t    }\r\n\t\t}\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n    return  ConnectRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3iTrs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__KmWhC\",\"active\":\"MyPosts_active__1PUuD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"Post_ava__3Sm5j\",\"item\":\"Post_item__gkxvL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"ProfileInfo_ava__34sGh\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3chWZ\"};","import React from 'react';\r\nimport styles from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\t\r\n\tconsole.log(props.message)\r\n\r\n\treturn <div className=\"MyPosts\">\r\n\t\t\t<div className={styles.item}>\r\n\t\t\t\t     {props.message}\r\n\t\t\t\t\t<button>add posr </button>\r\n\t\t\t\t\t<button>remove post </button>\r\n\t\t\t\t\t<img src=\"https://im0-tub-ru.yandex.net/i?id=44675ac9a817fef8da7d097ec3c25273&n=13\" className={styles.ava} />\r\n\t\t\t\t\t<span>like - {props.likesCount}</span>\r\n\t\t\t   </div>\r\n\t\t\t</div>\t\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form'; \r\n\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post'\r\nimport {requiredFields, maxLengthCreators} from './../../../utilities/validators/validators';\r\nimport {Textarea} from '../../Common/FormsControls/FormControls';\r\n//import {addPostActionCreator, addNewPostActionCreator} from '../../../ProfileReducer';\r\n\r\nconst maxLength15 = maxLengthCreators(15);\r\n\r\nconst PostForm = (props) => {\r\n     return <form onSubmit={props.handleSubmit}>\r\n                  <div><Field component={Textarea} name={\"post\"} validate={[requiredFields, maxLength15]}/></div>\r\n                  <button>send letter</button>\r\n            </form>\r\n}\r\n\r\nconst ResultPostForm = reduxForm({\r\n\tform: 'post'\r\n})(PostForm);\r\n\r\n\r\nconst MyPosts = React.memo((props) => {\r\n     console.log('render');\r\n\tlet postsElement = props.posts.map( p => <Post message={p.message} id={p.id} likesCount={p.likesCount} />) \r\n\r\n/*\r\n    let BtnClick = () => {\r\n\t\tprops.addNewPost(); \r\n\t} \r\n\t\r\n\tlet postOnchange = () => {\r\n\t\tlet val = newPost.current.value;\r\n\t\tprops.updateNewPost(val);\r\n\r\n\t}\r\n*/\r\n\tconst onSubmit = (data) => {\r\n      \tconsole.log(data);\r\n\t\tprops.addNewPost(data.post); \r\n      }\r\n\r\n      console.log(maxLengthCreators())\r\n\t \r\n\treturn <div className=\"MyPosts\">\r\n          \t     <ResultPostForm  onSubmit={onSubmit} />\r\n\t\t\t      {postsElement}\t\r\n\t\t\t</div>\t\r\n\t});\r\n\r\nexport default MyPosts;\r\n\r\n/*\r\n<textarea ref={newPost} value={props.newPostText} onChange={postOnchange}/>\r\n\t\t     <div>\r\n\t\t\t     <button onClick={BtnClick}>add post</button>\r\n\t\t\t </div>\r\n*/","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {addPostActionCreator} from '../../../ProfileReducer';\r\nimport {connect} from 'react-redux';\r\n\r\n/*\r\nconst MyPostsContainer = (props) => {\r\n\t\r\n\tlet state = props.store.getState();\r\n  \t\r\n    let addPost = () => {\r\n\t\t//props.dispatch(addPostActionCreator());\r\n\t\tprops.store.dispatch(addPostActionCreator());  \r\n\t} \r\n\t\r\n\tlet postOnchange = (value) => {\r\n\t\tprops.store.dispatch(addNewPostActionCreator(value));\r\n\t\t\r\n\t}\r\n\r\n\treturn (<MyPosts updateNewPost={postOnchange} addNewPost={addPost} posts={state.profile.posts} newPostText={state.profile.newValue}/>); // posts={props.posts}\r\n}\r\n*/\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn  {\r\n\t\tposts: state.profile.posts,\r\n       // newPostText: state.profile.newValue\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n         return {\r\n         \t     //  updateNewPost: (value) =>  dispatch(addNewPostActionCreator(value)),\r\n                   addNewPost: (newPostText) => dispatch(addPostActionCreator(newPostText))\r\n                }\t\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React, {useState, useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n\t// useState возвращает значение, и функцию, которая это значение меняет\r\n\r\n\tlet stateWithSetState = useState(false); // здесь сидит массив\r\n//\tlet editMode = stateWithSetState[0];   первым элементом будет значение\r\n//\tlet setEditMode = stateWithSetState[1];   вторым элементом - функция, устанавливающая это значение\r\n\r\n\tlet [editMode, setEditMode] = stateWithSetState;\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n    \tsetEditMode(true);\r\n    }\r\n\r\n    const  deactivateEditMode = (ev) => {\r\n\t\tsetEditMode(false);\r\n         props.updateStatus(status);\r\n\r\n\t}\r\n\r\n\tconst statusChange = (ev) => {\r\n\t\t//this.setState({status: ev.currentTarget.value});\r\n\t\tsetStatus(ev.currentTarget.value);\r\n\t}\r\n\r\n\tuseEffect( () => {  // useEffect выполнит какие-то действия когда компонента уже вмотнтируется\r\n\t\t    debugger;\r\n            setStatus(props.status);\r\n\t}, [props.status] );\r\n\r\n\t       return( \r\n\t\t\t\t<div>\r\n\t\t\t\t  { !editMode && // если !editMode, показываем спан (editMode == false)\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t     <span onDoubleClick={activateEditMode}>{props.status || \"---------\"}</span> \r\n\t\t\t\t           \r\n\t\t\t\t       </div>\r\n\t\t\t      } \r\n\t\t\t        { editMode &&   // если editMode, показываем инпут \r\n\t\t\t\t       <div>\r\n\t\t\t\t           <input autoFocus={true} onBlur={deactivateEditMode} onChange={statusChange} value={status}/>\r\n\t\t\t\t       </div>\r\n\t\t\t        } \r\n\t\t\t       \r\n\t\t\t       \r\n\t\t\t\t</div>\r\n\t\t\t)\r\n    \r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from '../../Common/Preloader/preloader';\r\n\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = (props) => {\r\n\t// пока не пришли данные, показывается прелоадер\r\n  if(!props.profile){\r\n\t\t return <Preloader />\r\n\t}\r\n\r\n\treturn <div className=\"ProfileInfo\">\r\n\t\t         <div>\r\n\t\t\t\t    <img src=\"https://im0-tub-ru.yandex.net/i?id=44675ac9a817fef8da7d097ec3c25273&n=13\"  className={classes.ava}/>\r\n\t\t\t     </div>\r\n\t\t\t     \r\n\t\t\t\t <div>\r\n\t\t\t\t\t  <p>обо мне: {props.profile.aboutMe}</p>\r\n\t\t\t\t\t  <div> контакты: <br />\r\n                            <p>facebook: {props.profile.contacts.facebook}</p>\r\n                            <p>vkontacte: {props.profile.contacts.vk}</p>\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t  <img src={props.profile.photos.large}  className={classes.mainPhoto}/>\r\n\t\t\t\t\t\t<ProfileStatusWithHooks updateStatus={props.updateStatus} status={props.status}/>\r\n\t\t\t\t </div>\r\n\t\t\t</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\n\r\nimport classes from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'; // posts={props.state.posts} value={props.state.newValue} dispatch={props.dispatch}\r\n\r\nconst Profile = (props) => {\r\n\r\n\treturn <div className=\"Profile\">\r\n\t        <ProfileInfo profile={props.profile} updateStatus={props.updateStatus} status={props.status}/>\r\n\t        <MyPostsContainer store={props.store}  />\r\n\t\t</div>\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\nimport classes from './Profile.module.css';\r\nimport Profile from './Profile';\r\nimport {setProfile} from '../../ProfileReducer';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {getProfileThunk, updateStatusThunk, setStatusThunk} from '../../ProfileReducer';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n\tcomponentDidMount(){\r\n\r\n        let userId = this.props.match.params.userId;  // this.props.match.params.userId берет айди пользователя из урла\r\n        if(!userId){\r\n        \tuserId = this.props.authorizedId;\r\n            if(!userId) {\r\n            \tthis.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n\r\n        this.props.getProfileThunk(userId);\r\n        this.props.setStatusThunk(userId);\r\n\t}\r\n\r\n\t   render(){\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t        <Profile {...this.props}  profile={this.props.profile}\r\n\t\t\t\t         status={this.props.status} updateStatus={this.props.updateStatusThunk}/>\r\n\t\t\t\t\t)\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n\t\tprofile: state.profile.profile,\r\n\t\tstatus: state.profile.status,\r\n\t\tauthorizedId: state.auth.id,\r\n\t\tisAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n \tconnect(mapStateToProps, {getProfileThunk, setStatusThunk, updateStatusThunk}),\r\n \t withRouter,\r\n  //   WithAuthRedirect,\r\n \t)(ProfileContainer);\r\n\r\n//  connect и withRouter по факту возвращают новые компоненты. connect  берет данные из стора.\r\n// withRouter возмет данные из урла и закинет в компенету Profile\r\n"],"sourceRoot":""}