{"version":3,"sources":["hoc/WithAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","AuthRedirectComponent","this","props","to","React","connect","module","exports","DialodItem","path","id","className","s","dialog","name","Message","message","maxLength100","maxLengthCreators","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","value","validate","requiredFields","Dialogs","dialogs","dialogsItems","dialogsData","map","item","i","DialogItem","key","messages","messagesData","dialogs_item","data","console","log","addMessage","areaVal","compose","dispatch","text","addDialog"],"mappings":"+NAIIA,EAA6B,SAACC,GACjC,MAAO,CACAC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IAExCC,EAFuC,iLAI3C,OAAIC,KAAKC,MAAMN,OAEL,kBAACG,EAAcE,KAAKC,OAFA,kBAAC,IAAD,CAAUC,GAAI,eAJD,GAETC,IAAML,WAUxC,OAF+BM,YAAQX,EAARW,CAAoCL,K,oBCnBvEM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sICWnKC,EARI,SAACN,GACnB,IAAIO,EAAO,YAAcP,EAAMQ,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,QACnB,kBAAC,IAAD,CAASV,GAAIM,GAAb,IAAqBP,EAAMY,KAA3B,OCIQC,EAPC,SAACb,GAEhB,OAAQ,yBAAKS,UAAWC,IAAEI,SACdd,EAAMc,U,gBCKbC,EAAeC,YAAkB,KASjCC,EAAmBC,YAAU,CAACC,KAAM,WAAjBD,EAPL,SAAClB,GACf,OAAO,0BAAMoB,SAAUpB,EAAMqB,cAChB,iCAAM,kBAACC,EAAA,EAAD,CAAOV,KAAM,UAAWW,UAAWC,IAAUC,MAAOzB,EAAMyB,MAAOC,SAAU,CAACC,IAAgBZ,MAC7G,oDAqCOa,EA/BC,SAAC5B,GAEb,IAAIP,EAAQO,EAAM6B,QAEjBC,EAAerC,EAAMsC,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAACC,EAAD,CAAYC,IAAKF,EAAGtB,KAAMqB,EAAKrB,KAAMJ,GAAIyB,EAAKzB,QAChG6B,EAAW5C,EAAM6C,aAAaN,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAASE,IAAKF,EAAGpB,QAASmB,EAAKnB,QAASN,GAAIyB,EAAKzB,QASpG,OACQ,yBAAKC,UAAWC,IAAEmB,SAEvB,yBAAKpB,UAAWC,IAAE6B,cACdT,GAGJ,yBAAKrB,UAAWC,IAAE2B,UACfA,GAED,6BACG,kBAACpB,EAAD,CAAkBG,SAhBH,SAACoB,GACtBC,QAAQC,IAAIF,GACZxC,EAAM2C,WAAWH,EAAK1B,UAc2BW,MAAOzB,EAAM6B,QAAQe,aCD1DC,sBACb1C,aAjBoB,SAACV,GACtB,MAAO,CACAoC,QAASpC,EAAMoC,YAIE,SAACiB,GACzB,MAAO,CACKH,WAAY,SAACI,GAAD,OAAUD,EAASE,YAAUD,SAUjDnD,IAFUiD,CAGXjB","file":"static/js/4.7d442d06.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n\treturn {\r\n        isAuth: state.auth.isAuth\r\n\t}\r\n};\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n\t\tclass AuthRedirectComponent extends React.Component{\r\n\t\t\trender(){\r\n\t\t\t\tif(!this.props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n\t\t\t    return <Component {...this.props} />\r\n\t\t    }\r\n\t\t}\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n    return  ConnectRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1rcou\",\"dialogs_item\":\"Dialogs_dialogs_item__2PnDq\",\"dialog\":\"Dialogs_dialog__d0EDb\",\"messages\":\"Dialogs_messages__3ulq2\",\"message\":\"Dialogs_message__1jetk\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialodItem = (props) => {\r\n\tlet path = \"/dialogs/\" + props.id;\t\r\n\t\r\n\treturn <div className={s.dialog}>\r\n\t\t\t    <NavLink to={path}> {props.name} </NavLink>\r\n\t\t\t</div>\r\n}\r\n\r\nexport default DialodItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Message = (props) => {\r\n\t\r\n\treturn  <div className={s.message}>\r\n\t\t\t         {props.message}\r\n\t\t\t   </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\n\r\n\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {addDialog, createDialog} from'../../dialogsReducer';\r\n\r\nimport {Textarea} from '../Common/FormsControls/FormControls';\r\nimport {requiredFields, maxLengthCreators} from '../../utilities/validators/validators';\r\n\r\nconst maxLength100 = maxLengthCreators(100);\r\n\r\nconst MessageForm = (props) => {\r\n      return <form onSubmit={props.handleSubmit}>\r\n                   <div> <Field name={\"message\"} component={Textarea} value={props.value} validate={[requiredFields, maxLength100]}/></div>\r\n\t\t\t\t    <button>send message</button>\r\n             </form>\r\n}\r\n\r\nconst MessageReduxForm = reduxForm({form: 'dialogs'})(MessageForm);\r\n\r\nconst Dialogs = (props) => {\t\r\n\t\r\n    let state = props.dialogs;\r\n\r\n\tlet dialogsItems = state.dialogsData.map((item, i) => <DialogItem key={i} name={item.name} id={item.id} />);\r\n\tlet messages = state.messagesData.map((item, i) => <Message key={i} message={item.message} id={item.id} />);\r\n\r\n  //  if(!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n  const addNewMessage = (data) => {\r\n  \tconsole.log(data);\r\n  \tprops.addMessage(data.message);\r\n  }\r\n     \r\n\treturn (\r\n         <div className={s.dialogs}>\r\n\t     \r\n\t\t\t <div className={s.dialogs_item}>\t\t\t\t\t  \r\n\t\t\t\t   {dialogsItems}\r\n\t\t\t </div>\r\n\t\t\t \r\n\t\t\t <div className={s.messages}> \r\n\t\t\t\t  {messages}\r\n\t\t\t </div>\r\n\t     <div>\r\n\t\t       <MessageReduxForm onSubmit={addNewMessage} value={props.dialogs.areaVal}/> \r\n\t\t </div> \r\n\t  </div>\r\n\t)\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\n\r\nimport {addDialog} from'../../dialogsReducer';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport Dialogs from './Dialogs';\r\n\r\n/*\r\nconst DialogsContainer = (props) => {\t\r\n\r\n\tlet state = props.store.getState();\r\n\t\t\r\n\tlet addNewPost = () => {\r\n\t   props.store.dispatch(addDialog()); // addDialog() - определит тип для акшна\r\n\t}\r\n\t\r\n    let changeOnKeyPressMessage = (text) => {   \t\r\n    \tprops.store.dispatch(createDialog(text));\r\n    }\r\n\r\n\treturn (\r\n            <Dialogs upDateNewMessageBody={changeOnKeyPressMessage} addMessage={addNewPost} dialogs={state.dialogs}/>\r\n\t)\r\n}\r\n*/\r\n\r\n \r\n\r\n//let RedirectComponent = withAuthRedirect(Dialogs);\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n        dialogs: state.dialogs\r\n\t}\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch)=> {\r\n\treturn {\r\n             addMessage: (text) => dispatch(addDialog(text))\r\n\t}\r\n};\r\n\r\n//const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(RedirectComponent);\r\n\r\n\r\n\r\nexport default compose(\r\n \tconnect(mapStateToProps, mapDispatchToProps),\r\n     WithAuthRedirect,\r\n \t)(Dialogs);;"],"sourceRoot":""}